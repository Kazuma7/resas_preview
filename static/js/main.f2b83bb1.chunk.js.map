{"version":3,"sources":["function/fetchPrefectures.js","function/fetchPrefInfo.js","components/PrefectureCheckbox.jsx","styles/prefColor.js","components/Message.jsx","apiKey.js","App.jsx","reportWebVitals.js","index.js"],"names":["fetchPrefectures","apiKey","a","localStorage","getItem","date","JSON","parse","Date","getMonth","removeItem","fetch","headers","resPref","json","setItem","stringify","result","fetchPrefInfo","apis","prefCode","push","fetchPrefInfoByPrefCode","Promise","all","responses","prefInfo","res","tmp","Object","keys","data","map","i","value","resInfo","PrefectureCheckbox","checked","disabled","prefName","onChange","className","type","id","htmlFor","prefColor","Message","href","graphOption","scales","x","display","title","text","y","suggestedMin","suggestedMax","responsive","maintainAspectRatio","App","useState","prefectures","setPrefectures","prefecturesLoading","setPrefecturesLoading","Array","fill","selectedPrefectures","setSelectedPrefectures","series","setSeries","setPrefInfo","useEffect","fetchedPrefName","fetchedPrefInfo","f","index","selectedCopy","slice","seriesCopy","length","label","splice","resSeries","backgroundColor","borderColor","changeSelection","labels","datasets","options","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2b83bb1.chunk.js","sourcesContent":["const fetchPrefectures = async (apiKey) => {\n  //１ヶ月以上経過したらローカルストレージのデータを削除する\n  if (localStorage.getItem('prefNameDate')) {\n    const date = JSON.parse(localStorage.getItem('prefNameDate'));\n    if (new Date(date).getMonth() !== new Date().getMonth()) {\n      localStorage.removeItem('prefName');\n    }\n  }\n\n  //ローカルストレージにデータがあればそれを使う\n  if (localStorage.getItem('prefName')) {\n    return JSON.parse(localStorage.getItem('prefName'));\n  }\n\n  //ローカルストレージにデータがなければRESAS-APIを通してデータを持ってくる\n  const resPref = await fetch(\n    'https://opendata.resas-portal.go.jp/api/v1/prefectures',\n    {\n      headers: { 'X-API-KEY': apiKey },\n    }\n  );\n  const json = await resPref.json();\n  localStorage.setItem('prefNameDate', JSON.stringify(new Date()));\n  localStorage.setItem('prefName', JSON.stringify(json.result));\n  return json.result;\n};\n\nexport { fetchPrefectures };\n","const fetchPrefInfo = async (apiKey) => {\n  //１ヶ月以上経過したらローカルストレージのデータを削除する\n  if (localStorage.getItem('prefInfoDate')) {\n    const date = JSON.parse(localStorage.getItem('prefInfoDate'));\n    if (new Date(date).getMonth() !== new Date().getMonth()) {\n      localStorage.removeItem('prefInfo');\n    }\n  }\n\n  //ローカルストレージにデータがあればそれを使う\n  if (localStorage.getItem('prefInfo')) {\n    return JSON.parse(localStorage.getItem('prefInfo'));\n  }\n\n  //fetchPrefInfoByPrefCode関数を用いてデータを取得する\n  const apis = [];\n  for (let prefCode = 0; prefCode < 47; prefCode++) {\n    apis.push(fetchPrefInfoByPrefCode(apiKey, prefCode + 1));\n  }\n  const responses = await Promise.all(apis);\n\n  //各都道府県の総人口のデータをまとめて取得する\n  const prefInfo = [];\n  for (let prefCode = 0; prefCode < 47; prefCode++) {\n    const res = responses[prefCode];\n    const tmp = Object.keys(res.result.data[0].data).map((i) => {\n      return res.result.data[0].data[i].value / 1000;\n    });\n    prefInfo.push(tmp);\n  }\n  localStorage.setItem('prefInfoDate', JSON.stringify(new Date()));\n  localStorage.setItem('prefInfo', JSON.stringify(prefInfo));\n\n  return prefInfo;\n};\n\n//RESAS-APIを通してデータを持ってくる\nconst fetchPrefInfoByPrefCode = async (apiKey, prefCode) => {\n  const resInfo = await fetch(\n    `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${prefCode}`,\n    { headers: { 'X-API-KEY': apiKey } }\n  );\n  const res = await resInfo.json();\n  return res;\n};\n\nexport { fetchPrefInfo };\n","const PrefectureCheckbox = ({\n  checked,\n  disabled,\n  prefName,\n  prefCode,\n  onChange,\n}) => {\n  return (\n    <div className=\"checkboxOut\">\n      <input\n        type=\"checkbox\"\n        id={prefCode + 'checkbox_pref'}\n        disabled={disabled}\n        checked={checked}\n        onChange={onChange}\n      />\n      <label htmlFor={prefCode + 'checkbox_pref'}>{prefName}</label>\n    </div>\n  );\n};\n\nexport { PrefectureCheckbox };\n","const prefColor = [\n  '#FFB8B8',\n  '#FFC1B8',\n  '#FFCAB8',\n  '#FFD3B8',\n  '#FFDCB8',\n  '#FFE4B8',\n  '#FFEDB8',\n  '#FFF6B8',\n  '#FFFFB8',\n  '#F6FFB8',\n  '#EDFFB8',\n  '#E4FFB8',\n  '#DCFFB8',\n  '#D3FFB8',\n  '#CAFFB8',\n  '#C1FFB8',\n  '#B8FFB8',\n  '#B8FFC1',\n  '#B8FFCA',\n  '#B8FFD3',\n  '#B8FFDC',\n  '#B8FFE4',\n  '#B8FFED',\n  '#B8FFF6',\n  '#B8FFFF',\n  '#B8F6FF',\n  '#B8EDFF',\n  '#B8E4FF',\n  '#B8DCFF',\n  '#B8D3FF',\n  '#B8CAFF',\n  '#B8C1FF',\n  '#B8B8FF',\n  '#C1B8FF',\n  '#CAB8FF',\n  '#D3B8FF',\n  '#DCB8FF',\n  '#E4B8FF',\n  '#EDB8FF',\n  '#F6B8FF',\n  '#FFB8FF',\n  '#FFB8F6',\n  '#FFB8ED',\n  '#FFB8E4',\n  '#FFB8DC',\n  '#FFB8D3',\n];\n\nexport default prefColor;\n","const Message = () => {\n  return (\n    <div>\n      <div className=\"mainMessageBox\">\n        <p>\n          💡ここはRESAS-APIを用いて都道府県ごとの総人口を調べ、比較することができるwebサービスです。\n        </p>\n      </div>\n      <div className=\"subMessageBox\">\n        <p className=\"subM\">RESAS-APIについてはこちら</p>\n        <a className=\"subMA1\" href=\"https://opendata.resas-portal.go.jp/\">\n          https://opendata.resas-portal.go.jp/\n        </a>\n        <p className=\"subM\">ソースコードはGitHubで公開中</p>\n        <a className=\"subMA\" href=\"https://github.com/Kazuma7/resas-app\">\n          https://github.com/Kazuma7/resas_preview\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport { Message };\n","const apiKey = 'kZpPSC2OuUSuQx8qGem9FRbrHq6u14XPmrzqh3K9';\nexport default apiKey;\n","import { useEffect, useState } from 'react';\nimport { fetchPrefectures } from './function/fetchPrefectures';\nimport { fetchPrefInfo } from './function/fetchPrefInfo';\nimport { PrefectureCheckbox } from './components/PrefectureCheckbox';\nimport { Line } from 'react-chartjs-2';\nimport prefColor from './styles/prefColor';\nimport './styles/App.css';\nimport { Message } from './components/Message';\nimport apiKey from './apiKey';\n\nconst graphOption = {\n  scales: {\n    x: {\n      display: true,\n      title: {\n        display: true,\n        text: '年代 (年)',\n      },\n    },\n    y: {\n      display: true,\n      title: {\n        display: true,\n        text: '総人口 (千人)',\n      },\n      suggestedMin: 0,\n      suggestedMax: 15000000 / 1000,\n    },\n  },\n  //アスペクト比率をデフォルトから変更するため\n  responsive: true,\n  maintainAspectRatio: false,\n};\n\nconst App = () => {\n  const [prefectures, setPrefectures] = useState({});\n  const [prefecturesLoading, setPrefecturesLoading] = useState(false);\n  const [selectedPrefectures, setSelectedPrefectures] = useState(\n    Array(47).fill(false)\n  );\n  const [series, setSeries] = useState([]);\n  const [prefInfo, setPrefInfo] = useState([]);\n\n  useEffect(() => {\n    const f = async () => {\n      setPrefecturesLoading(true);\n\n      const [fetchedPrefName, fetchedPrefInfo] = await Promise.all([\n        fetchPrefectures(apiKey),\n        fetchPrefInfo(apiKey),\n      ]);\n\n      setPrefectures(fetchedPrefName);\n      setPrefInfo(fetchedPrefInfo);\n\n      setPrefecturesLoading(false);\n    };\n    f();\n  }, []);\n\n  const changeSelection = (index) => {\n    //チェックボックスを連打されたときのバグを防ぐため\n    setPrefecturesLoading(true);\n\n    // checkboxのTrue/Falseの配列を複製\n    const selectedCopy = selectedPrefectures.slice();\n\n    //checkboxが押されたらTrue/Falseを反転\n    selectedCopy[index] = !selectedCopy[index];\n\n    //chechboxにチェックが入ったらグラフ表示用のデータ配列にデータを挿入\n    if (!selectedPrefectures[index]) {\n      const resSeries = {\n        data: prefInfo[index],\n        label: prefectures[index].prefName,\n        //あらかじめ決めておいた色コードを都道府県に合わせて取得(被らない)\n        backgroundColor: prefColor[index],\n        borderColor: prefColor[index],\n      };\n      setSelectedPrefectures(selectedCopy);\n      setSeries([...series, resSeries]);\n      setPrefecturesLoading(false);\n      //checkboxが外されたらグラフ表示用のデータ配列からデータを削除\n    } else {\n      const seriesCopy = series.slice();\n      for (let i = 0; i < seriesCopy.length; i++) {\n        if (seriesCopy[i].label === prefectures[index].prefName) {\n          seriesCopy.splice(i, 1);\n        }\n      }\n\n      setSelectedPrefectures(selectedCopy);\n      setSeries(seriesCopy);\n      setPrefecturesLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>日本総人口比較webサービス</h1>\n\n      <Message />\n\n      <h2>都道府県</h2>\n\n      <div className=\"checkboxes\">\n        {Object.keys(prefectures).map((i) => {\n          // 都道府県のチェックボックスを横に並べて表示させたい\n          return (\n            <PrefectureCheckbox\n              key={prefectures[i].prefCode + 'checkbox_key'}\n              checked={selectedPrefectures[prefectures[i].prefCode - 1]}\n              disabled={prefecturesLoading}\n              prefName={prefectures[i].prefName}\n              prefCode={prefectures[i].prefCode}\n              onChange={() => changeSelection(prefectures[i].prefCode - 1)}\n            />\n          );\n        })}\n      </div>\n\n      <h2>総人口グラフ</h2>\n      <div className=\"graph\">\n        <div className=\"graphInner\">\n          <Line\n            data={{\n              labels: [\n                1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995, 2000, 2005,\n                2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045,\n              ],\n              datasets: series,\n            }}\n            options={graphOption}\n          />\n        </div>\n      </div>\n\n      <div className=\"footer\">created by kazuma iizumi</div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}